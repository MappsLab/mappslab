# source: http://localhost:3000/graphql
# timestamp: Mon Apr 27 2020 17:51:18 GMT-0700 (Pacific Daylight Time)

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

input AddPinToRouteInput {
  """if no connectToPin is supplied, a new route will be created"""
  connectToPin: String!

  """if no position is supplied, defaults to 'AFTER'"""
  position: Position
}

input BooleanOperators {
  eq: Boolean
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Classroom implements Node {
  uid: String!
  title: String
  slug: String
  description: String
  students: UserConnection
  teachers: UserConnection
  viewerIsTeacher: Boolean!
  maps: MapConnection
}

type ClassroomConnection implements Connection {
  pageInfo: PageInfo!
  edges: [ClassroomEdge]!
}

type ClassroomEdge implements Edge {
  cursor: String!
  node: Classroom
}

input ClassroomFilterParameter {
  title: StringOperators
}

input ClassroomListOptions {
  first: Int
  after: String
  sort: ClassroomSortParameter
  where: ClassroomFilterParameter
}

input ClassroomSortParameter {
  title: SortOrder
}

interface Connection {
  pageInfo: PageInfo!
}

input CreateAdminInput {
  name: String!
  email: String!
  temporaryPassword: String
}

input CreateMapInput {
  title: String!
  description: String
  addToClassrooms: [String!]
}

input CreateStudentInput {
  name: String!
  email: String
  temporaryPassword: String!
  addToClassrooms: [String!]
}

input CreateTeacherInput {
  name: String!
  email: String!
  temporaryPassword: String
  addToClassrooms: [String!]
}

input CredentialsInput {
  email: String
  uid: String
  password: String!
}

type DataLayer implements Node {
  uid: String!
  uri: String!
  title: String!
}

type DataLayerConnection implements Connection {
  pageInfo: PageInfo!
  edges: [DataLayerEdge]!
}

type DataLayerEdge implements Edge {
  cursor: String!
  node: DataLayer
}

input DataLayerInput {
  kml: Upload!
  title: String!
}

input DataLayerSortParameters {
  title: String
}

input DataLayerWhereParameters {
  title: StringOperators
}

input DateOperators {
  eq: DateTime
  notEq: DateTime
  before: DateTime
  after: DateTime
  between: DateRange
}

input DateRange {
  start: DateTime!
  end: DateTime!
}

scalar DateTime

interface Edge {
  cursor: String!
}

input GetDataLayerInput {
  uid: String!
}

input GetDataLayersInput {
  first: Int
  after: String
  sort: DataLayerSortParameters
  where: DataLayerWhereParameters
}

input GetMapInput {
  uid: String!
}

input GetNodeInput {
  uid: String
  slug: String
}

input GetPinInput {
  uid: String!
}

input GetRouteInput {
  uid: String!
}

input GetUserInput {
  uid: String
  email: String
}

type Image implements Node {
  uid: String!
  sizes: [ImageSize]
  original: ImageSize
  tileset: Tileset
}

type ImageSize {
  format: String!
  uri: String!
  width: Int!
  height: Int!
  label: String
}

input ListOperators {
  includes: String
}

union LoginResult = LoginSuccess | RequiresReset

type LoginSuccess {
  jwt: Token
  viewer: User
}

type Map implements Node {
  uid: String!
  title: String
  slug: String
  description: String
  classroom: Classroom
  pins: PinConnection
  routes: RouteConnection
  dataLayers: DataLayerConnection
  baseImage: Image
}

type MapConnection implements Connection {
  pageInfo: PageInfo!
  edges: [MapEdge]!
}

type MapEdge implements Edge {
  cursor: String!
  node: Map
}

input MapFilterParameter {
  title: StringOperators
}

input MapListOptions {
  first: Int
  after: String
  sort: MapSortParameter
  where: MapFilterParameter
}

input MapSortParameter {
  title: SortOrder
}

type MapSubscription {
  map: Map!
}

input MapUpdatedInput {
  mapUid: String!
}

type Mutation {
  dummy: String
  createClassroom(input: NewClassroomInput!): Classroom!
  updateClassroom(input: UpdateClassroomInput!): Classroom!
  removeClassroom(uid: String!): Boolean!
  createMap(input: CreateMapInput!): Map!
  updateMap(input: UpdateMapInput!): Map!
  deleteMap(input: GetMapInput!): Boolean!
  createPin(input: NewPinInput!): Pin!
  updatePin(input: UpdatePinInput!): Pin!
  deletePin(input: GetPinInput!): Success!
  createRoute(input: NewRouteInput!): Route!
  addPinToRoute(input: AddPinToRouteInput!): Route!
  updateRoute(input: UpdateRouteInput!): Route!
  deleteRoute(uid: String!): Boolean!
  loginViewer(input: CredentialsInput!): LoginResult!
  createStudent(input: CreateStudentInput!): User!
  createTeacher(input: CreateTeacherInput!): User!
  createAdmin(input: CreateAdminInput!): User!
  updateUser(input: UpdateUserInput!): User!

  """deleteUser(uid: String!): Boolean!"""
  requestPasswordReset(input: GetUserInput): Success!
  resetPassword(input: UpdatePasswordInput!): LoginResult!
  setTemporaryPassword(input: SetTemporaryPasswordInput!): Success!
}

input NewClassroomInput {
  title: String!
  description: String
  addTeachers: [String]
}

input NewPinInput {
  title: String
  draft: Boolean
  lat: Float!
  lng: Float!
  description: String
  deleted: Boolean
  addToMaps: [String]!
  lessonUids: [String]
  addToRoute: AddPinToRouteInput
  image: Upload
  imageUrl: String
  video: String
}

input NewRouteInput {
  title: String
  addPin: String
  pins: [String]
}

interface Node {
  uid: String!
}

input NumberOperators {
  eq: Float
  notEq: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  between: NumberRange
}

input NumberRange {
  start: Float!
  end: Float!
}

"""Represents an arbitrary object."""
scalar Object

type PageInfo {
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  lastCursor: String
}

input PaginationInput {
  first: Int
  after: String!
}

type Pin implements Node {
  uid: String!
  title: String
  lat: Float!
  lng: Float!
  description: String
  owner: User
  maps: MapConnection
  route: PinInRoute
  draft: Boolean
  image: Image
  imageUrl: String
  video: String
}

type PinConnection implements Connection {
  pageInfo: PageInfo!
  edges: [PinEdge]!
}

type PinEdge implements Edge {
  cursor: String!
  node: Pin
}

input PinFilterParameter {
  title: StringOperators

  """Pin-specific relationship filters"""
  pinnedByUser: RelationshipOperators
  pinnedInMap: RelationshipOperators
}

type PinInRoute {
  route: Route!
  nextPin: Pin
  prevPin: Pin
  isFirst: Boolean!
  isLast: Boolean!
}

input PinListOptions {
  first: Int
  after: String
  sort: PinSortParameter
  where: PinFilterParameter
}

input PinSortParameter {
  title: SortOrder
  lat: SortOrder
  lng: SortOrder
}

type PinSubscription {
  pin: Pin!
}

input PinSubscriptionInput {
  mapUid: String!
}

enum Position {
  BEFORE
  AFTER
}

type Query {
  dummy: String
  classroom(input: GetNodeInput): Classroom
  classrooms(input: ClassroomListOptions): ClassroomConnection!
  map(input: GetMapInput!): Map
  maps(input: MapListOptions): MapConnection!
  pin(input: GetPinInput!): Pin
  pins(input: PinListOptions): PinConnection
  route(input: GetRouteInput!): Route!
  routes(input: RouteListOptions): RouteConnection!
  user(input: GetUserInput): User
  users(input: UsersListOptions): UserConnection!
  teachers(input: UsersListOptions): UserConnection!
  students(input: UsersListOptions): UserConnection!
  currentViewer: LoginSuccess
  dataLayer(input: GetDataLayerInput!): DataLayer
  dataLayers(input: GetDataLayersInput): DataLayerConnection!
}

input RelationshipOperators {
  eq: String
  notEq: String
}

type RequiresReset {
  resetToken: String!
  viewer: User
}

type Route implements Node {
  uid: String!
  title: String
  description: String
  owner: User!
  pins: PinConnection
  maps: MapConnection
  image: Image
  imageUrl: String
  video: String
}

type RouteConnection implements Connection {
  pageInfo: PageInfo!
  edges: [RouteEdge]!
}

type RouteEdge implements Edge {
  cursor: String!
  node: Route
}

input RouteFilterParameter {
  routeContainsPin: RelationshipOperators
  routeWithinMap: RelationshipOperators
}

input RouteListOptions {
  first: Int
  after: String
  where: RouteFilterParameter
}

input SetTemporaryPasswordInput {
  uid: String!
  temporaryPassword: String!
}

enum SortOrder {
  ASC
  DESC
}

input StringOperators {
  eq: String
  notEq: String
  contains: String
}

type Subscription {
  dummy: String
  mapUpdated(input: MapUpdatedInput!): MapSubscription!
  pinAddedToMap(input: PinSubscriptionInput!): PinSubscription!
  pinUpdated(input: PinSubscriptionInput!): PinSubscription!
  pinDeleted(input: PinSubscriptionInput!): PinSubscription!
}

type Success {
  success: Boolean!
  messages: [String]!
}

type Tileset implements Node {
  uid: String!
  baseUri: String!
  maxZoom: Int!
}

type Token {
  token: String!
  expires: String!
}

input UidInput {
  uid: String!
}

input UpdateClassroomInput {
  uid: String!
  title: String
  description: String
  addStudents: [String]
  addTeachers: [String]
  addMaps: [String]
}

input UpdateMapInput {
  uid: String!
  title: String
  description: String
  baseImage: Upload
  createDataLayer: DataLayerInput
  associateDataLayer: UidInput
  removeDataLayer: UidInput
}

input UpdatePasswordInput {
  resetToken: String!
  password: String!
}

input UpdatePinInput {
  uid: String
  title: String
  lat: Float
  lng: Float
  description: String
  addToMaps: [String]
  lessonUids: [String]
  addToRoute: AddPinToRouteInput
  image: Upload
  video: String
  imageUrl: String
}

input UpdateRouteInput {
  uid: String!
  title: String
  addPin: String
  description: String
  image: Upload
  video: String
  imageUrl: String
}

input UpdateUserInput {
  uid: String!
  name: String
  email: String
  addToClassrooms: [String!]
  removeFromClassrooms: [String!]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Node {
  uid: String!
  name: String!
  classrooms: ClassroomConnection
  maps: MapConnection
  roles: [String]
  pins(input: PaginationInput): PinConnection
  routes(input: PaginationInput): RouteConnection
  email: String
}

type UserConnection implements Connection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
}

type UserEdge implements Edge {
  cursor: String!
  node: User
}

input UserFilterParameter {
  name: StringOperators
  roles: ListOperators

  """User-specific relationship filters"""
  userTeachesIn: RelationshipOperators
  userLearnsIn: RelationshipOperators
}

input UsersListOptions {
  first: Int
  after: String
  sort: UserSortParameter
  where: UserFilterParameter
}

input UserSortParameter {
  name: SortOrder
}
